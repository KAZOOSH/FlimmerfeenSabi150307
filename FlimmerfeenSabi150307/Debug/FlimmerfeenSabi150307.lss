
FlimmerfeenSabi150307.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000382  00000416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800060  00800060  00000416  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000068  00000000  00000000  00000b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000633  00000000  00000000  00000bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000020e  00000000  00000000  0000122d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000350  00000000  00000000  0000143b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d8  00000000  00000000  0000178c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000024e  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003ae  00000000  00000000  00001ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	d9 c0       	rjmp	.+434    	; 0x1c4 <__vector_8>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a5 39       	cpi	r26, 0x95	; 149
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	ed d0       	rcall	.+474    	; 0x208 <main>
  2e:	a7 c1       	rjmp	.+846    	; 0x37e <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <blitz>:
uint16_t lastValues[VALUESIZE];
uint8_t full = 0;

void blitz(uint8_t ontime, uint8_t ledled)
{
    PORTB &= ~(1<<ledled);      //LED on
  32:	48 b3       	in	r20, 0x18	; 24
  34:	21 e0       	ldi	r18, 0x01	; 1
  36:	30 e0       	ldi	r19, 0x00	; 0
  38:	06 2e       	mov	r0, r22
  3a:	01 c0       	rjmp	.+2      	; 0x3e <__SP_L__+0x1>
  3c:	22 0f       	add	r18, r18
  3e:	0a 94       	dec	r0
  40:	ea f7       	brpl	.-6      	; 0x3c <blitz+0xa>
  42:	92 2f       	mov	r25, r18
  44:	90 95       	com	r25
  46:	94 23       	and	r25, r20
  48:	98 bb       	out	0x18, r25	; 24
    while(ontime)
  4a:	07 c0       	rjmp	.+14     	; 0x5a <__SREG__+0x1b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4c:	ef ea       	ldi	r30, 0xAF	; 175
  4e:	f4 e0       	ldi	r31, 0x04	; 4
  50:	31 97       	sbiw	r30, 0x01	; 1
  52:	f1 f7       	brne	.-4      	; 0x50 <__SREG__+0x11>
  54:	00 c0       	rjmp	.+0      	; 0x56 <__SREG__+0x17>
  56:	00 00       	nop
    {
        _delay_ms(1);
        ontime--;
  58:	81 50       	subi	r24, 0x01	; 1
uint8_t full = 0;

void blitz(uint8_t ontime, uint8_t ledled)
{
    PORTB &= ~(1<<ledled);      //LED on
    while(ontime)
  5a:	81 11       	cpse	r24, r1
  5c:	f7 cf       	rjmp	.-18     	; 0x4c <__SREG__+0xd>
    {
        _delay_ms(1);
        ontime--;
    }
    PORTB |=  (1<<ledled);      //LED off
  5e:	88 b3       	in	r24, 0x18	; 24
  60:	82 2b       	or	r24, r18
  62:	88 bb       	out	0x18, r24	; 24
  64:	08 95       	ret

00000066 <testLEDs>:
}

void testLEDs()
{
  66:	cf 93       	push	r28
  68:	df 93       	push	r29
  6a:	2f ef       	ldi	r18, 0xFF	; 255
  6c:	82 e5       	ldi	r24, 0x52	; 82
  6e:	97 e0       	ldi	r25, 0x07	; 7
  70:	21 50       	subi	r18, 0x01	; 1
  72:	80 40       	sbci	r24, 0x00	; 0
  74:	90 40       	sbci	r25, 0x00	; 0
  76:	e1 f7       	brne	.-8      	; 0x70 <testLEDs+0xa>
  78:	00 c0       	rjmp	.+0      	; 0x7a <testLEDs+0x14>
  7a:	00 00       	nop
    _delay_ms(500);
    for(uint8_t i = 0; i<3; i++)
  7c:	c0 e0       	ldi	r28, 0x00	; 0
    {
        for(uint8_t ii = i+2; ii > 0; ii--)
  7e:	dc 2f       	mov	r29, r28
  80:	de 5f       	subi	r29, 0xFE	; 254
        {
            blitz(50, i);
  82:	6c 2f       	mov	r22, r28
  84:	82 e3       	ldi	r24, 0x32	; 50
  86:	d5 df       	rcall	.-86     	; 0x32 <blitz>
  88:	2f e7       	ldi	r18, 0x7F	; 127
  8a:	89 ea       	ldi	r24, 0xA9	; 169
  8c:	93 e0       	ldi	r25, 0x03	; 3
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <testLEDs+0x28>
  96:	00 c0       	rjmp	.+0      	; 0x98 <testLEDs+0x32>
  98:	00 00       	nop
void testLEDs()
{
    _delay_ms(500);
    for(uint8_t i = 0; i<3; i++)
    {
        for(uint8_t ii = i+2; ii > 0; ii--)
  9a:	d1 50       	subi	r29, 0x01	; 1
  9c:	91 f7       	brne	.-28     	; 0x82 <testLEDs+0x1c>
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	82 e5       	ldi	r24, 0x52	; 82
  a2:	97 e0       	ldi	r25, 0x07	; 7
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <__stack+0x5>
  ac:	00 c0       	rjmp	.+0      	; 0xae <__stack+0xf>
  ae:	00 00       	nop
}

void testLEDs()
{
    _delay_ms(500);
    for(uint8_t i = 0; i<3; i++)
  b0:	cf 5f       	subi	r28, 0xFF	; 255
  b2:	c3 30       	cpi	r28, 0x03	; 3
  b4:	21 f7       	brne	.-56     	; 0x7e <testLEDs+0x18>
            blitz(50, i);
            _delay_ms(250);
        } 
        _delay_ms(500);        
    }
}
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <full_array>:

void full_array()
{
  bc:	cf 93       	push	r28
  be:	cc e0       	ldi	r28, 0x0C	; 12
  c0:	1e c0       	rjmp	.+60     	; 0xfe <full_array+0x42>
	for(uint8_t i = 0; (i<12) && (full == 0); i++)
	{
		blitz(2, RB_PIN);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	b5 df       	rcall	.-150    	; 0x32 <blitz>
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	86 e7       	ldi	r24, 0x76	; 118
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <full_array+0x12>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <full_array+0x1c>
  d8:	00 00       	nop
		_delay_ms(100);
		blitz(2, BR_PIN);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	a9 df       	rcall	.-174    	; 0x32 <blitz>
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	86 e7       	ldi	r24, 0x76	; 118
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <full_array+0x2a>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <full_array+0x34>
  f0:	00 00       	nop
  f2:	c1 50       	subi	r28, 0x01	; 1
    }
}

void full_array()
{
	for(uint8_t i = 0; (i<12) && (full == 0); i++)
  f4:	21 f4       	brne	.+8      	; 0xfe <full_array+0x42>
		blitz(2, RB_PIN);
		_delay_ms(100);
		blitz(2, BR_PIN);
		_delay_ms(100);
	}
	full=1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 60 00 	sts	0x0060, r24
  fc:	05 c0       	rjmp	.+10     	; 0x108 <full_array+0x4c>
    }
}

void full_array()
{
	for(uint8_t i = 0; (i<12) && (full == 0); i++)
  fe:	80 91 60 00 	lds	r24, 0x0060
 102:	88 23       	and	r24, r24
 104:	f1 f2       	breq	.-68     	; 0xc2 <full_array+0x6>
 106:	f7 cf       	rjmp	.-18     	; 0xf6 <full_array+0x3a>
		_delay_ms(100);
		blitz(2, BR_PIN);
		_delay_ms(100);
	}
	full=1;
}
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <disable_unused_modules>:


void disable_unused_modules() 
{
    cli();
 10c:	f8 94       	cli
	DDRB  |=  (1<<LDRPWR_PIN);          // LDRPWR output
 10e:	bb 9a       	sbi	0x17, 3	; 23
	PORTB &= ~(1<<LDRPWR_PIN);          // LDRPWR off
 110:	c3 98       	cbi	0x18, 3	; 24
    ADCSRA &= ~(1<<ADEN);				// disable ADC 
 112:	37 98       	cbi	0x06, 7	; 6
    DIDR0 = (1<<ADC2D) | (1<<ADC3D);	// turn off digital input buffer for analog used pins
 114:	88 e1       	ldi	r24, 0x18	; 24
 116:	84 bb       	out	0x14, r24	; 20
    sei();
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <goes_power_down_now>:
}

void goes_power_down_now()
{
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 11c:	85 b7       	in	r24, 0x35	; 53
 11e:	87 7e       	andi	r24, 0xE7	; 231
 120:	80 61       	ori	r24, 0x10	; 16
 122:	85 bf       	out	0x35, r24	; 53
    cli();
 124:	f8 94       	cli
    sleep_enable();                     // macro sets the SE-bit
 126:	85 b7       	in	r24, 0x35	; 53
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	85 bf       	out	0x35, r24	; 53
    sei();
 12c:	78 94       	sei
    sleep_cpu();                        // timed: sleep within 3 clock cycles
 12e:	88 95       	sleep
    sleep_disable();
 130:	85 b7       	in	r24, 0x35	; 53
 132:	8f 7d       	andi	r24, 0xDF	; 223
 134:	85 bf       	out	0x35, r24	; 53
 136:	08 95       	ret

00000138 <prepareLDR>:
}

void prepareLDR(uint8_t diff)           // prepare Photoresistors vor darkness or difference light
{
	// LDRPWR via pullup(40k) or direct on Vcc 
	cli();
 138:	f8 94       	cli
	DDRB = diff ? (DDRB |(1<<LDRPWR_PIN)) : (DDRB & ~(1<<LDRPWR_PIN));
 13a:	88 23       	and	r24, r24
 13c:	19 f0       	breq	.+6      	; 0x144 <prepareLDR+0xc>
 13e:	87 b3       	in	r24, 0x17	; 23
 140:	88 60       	ori	r24, 0x08	; 8
 142:	02 c0       	rjmp	.+4      	; 0x148 <prepareLDR+0x10>
 144:	87 b3       	in	r24, 0x17	; 23
 146:	87 7f       	andi	r24, 0xF7	; 247
 148:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<LDRPWR_PIN);          // LDRPWR on
 14a:	c3 9a       	sbi	0x18, 3	; 24
 14c:	8f ed       	ldi	r24, 0xDF	; 223
 14e:	9e e2       	ldi	r25, 0x2E	; 46
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <prepareLDR+0x18>
 154:	00 c0       	rjmp	.+0      	; 0x156 <prepareLDR+0x1e>
 156:	00 00       	nop
	_delay_ms(10);
	sei();	
 158:	78 94       	sei
 15a:	08 95       	ret

0000015c <readADC>:
}

uint16_t readADC(uint8_t smooth, uint8_t channel)
{
    cli();
 15c:	f8 94       	cli
    ADCSRA |= (1<<ADEN);				// ADC enable, need 200uA Power
 15e:	37 9a       	sbi	0x06, 7	; 6
    uint16_t temp = 0;
    uint8_t i = smooth;

    ADMUX  = (channel == 3) ? (1<<MUX1)|(1<<MUX0) : (1<<MUX1);  // PB3 or PB4 (tiny13A as input for ADC 
 160:	63 30       	cpi	r22, 0x03	; 3
 162:	11 f4       	brne	.+4      	; 0x168 <readADC+0xc>
 164:	93 e0       	ldi	r25, 0x03	; 3
 166:	01 c0       	rjmp	.+2      	; 0x16a <readADC+0xe>
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	97 b9       	out	0x07, r25	; 7
    ADCSRA |= (1<<ADSC);                // dummyconversion 25 ADC-clocks
 16c:	36 9a       	sbi	0x06, 6	; 6
    while(ADCSRA & (1<<ADSC));			// wait for finishing AD-conversion
 16e:	36 99       	sbic	0x06, 6	; 6
 170:	fe cf       	rjmp	.-4      	; 0x16e <readADC+0x12>
   (void) ADCW;							// ADC-readout to void
 172:	24 b1       	in	r18, 0x04	; 4
 174:	35 b1       	in	r19, 0x05	; 5
uint16_t readADC(uint8_t smooth, uint8_t channel)
{
    cli();
    ADCSRA |= (1<<ADEN);				// ADC enable, need 200uA Power
    uint16_t temp = 0;
    uint8_t i = smooth;
 176:	98 2f       	mov	r25, r24

uint16_t readADC(uint8_t smooth, uint8_t channel)
{
    cli();
    ADCSRA |= (1<<ADEN);				// ADC enable, need 200uA Power
    uint16_t temp = 0;
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
    ADMUX  = (channel == 3) ? (1<<MUX1)|(1<<MUX0) : (1<<MUX1);  // PB3 or PB4 (tiny13A as input for ADC 
    ADCSRA |= (1<<ADSC);                // dummyconversion 25 ADC-clocks
    while(ADCSRA & (1<<ADSC));			// wait for finishing AD-conversion
   (void) ADCW;							// ADC-readout to void

    while(i)
 17c:	08 c0       	rjmp	.+16     	; 0x18e <readADC+0x32>
    {
        i--;
 17e:	91 50       	subi	r25, 0x01	; 1
        ADCSRA |= (1<<ADSC);			// start conversion
 180:	36 9a       	sbi	0x06, 6	; 6
        while(ADCSRA&(1<<ADSC));		// waiting for end of conversion, duration 13ADC-clocks
 182:	36 99       	sbic	0x06, 6	; 6
 184:	fe cf       	rjmp	.-4      	; 0x182 <readADC+0x26>
        //low = ADCL;					// first reading (locking of ADCH)
        //high = ADCH;					// later get ADCH
        //temp += ((high<<8) | low); 
        temp += ADCW;					// summary 10bit ADC-readouts, ADCW is C-compiler 16-bit pseudo-register 
 186:	44 b1       	in	r20, 0x04	; 4
 188:	55 b1       	in	r21, 0x05	; 5
 18a:	24 0f       	add	r18, r20
 18c:	35 1f       	adc	r19, r21
    ADMUX  = (channel == 3) ? (1<<MUX1)|(1<<MUX0) : (1<<MUX1);  // PB3 or PB4 (tiny13A as input for ADC 
    ADCSRA |= (1<<ADSC);                // dummyconversion 25 ADC-clocks
    while(ADCSRA & (1<<ADSC));			// wait for finishing AD-conversion
   (void) ADCW;							// ADC-readout to void

    while(i)
 18e:	91 11       	cpse	r25, r1
 190:	f6 cf       	rjmp	.-20     	; 0x17e <readADC+0x22>
        //low = ADCL;					// first reading (locking of ADCH)
        //high = ADCH;					// later get ADCH
        //temp += ((high<<8) | low); 
        temp += ADCW;					// summary 10bit ADC-readouts, ADCW is C-compiler 16-bit pseudo-register 
    }
    sei();    
 192:	78 94       	sei
    return temp / smooth;			    // return average ADC-readouts
 194:	68 2f       	mov	r22, r24
 196:	c9 01       	movw	r24, r18
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	dd d0       	rcall	.+442    	; 0x356 <__udivmodhi4>
 19c:	cb 01       	movw	r24, r22
}
 19e:	08 95       	ret

000001a0 <getArrAverage>:

uint16_t getArrAverage(uint8_t size)
{
 1a0:	48 2f       	mov	r20, r24
 1a2:	e5 e6       	ldi	r30, 0x65	; 101
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t i;
	uint16_t sum = 0;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
	for (i=0 ;i < size; i++)
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <getArrAverage+0x18>
	{
		sum += lastValues[i];
 1ae:	21 91       	ld	r18, Z+
 1b0:	31 91       	ld	r19, Z+
 1b2:	82 0f       	add	r24, r18
 1b4:	93 1f       	adc	r25, r19

uint16_t getArrAverage(uint8_t size)
{
	uint8_t i;
	uint16_t sum = 0;
	for (i=0 ;i < size; i++)
 1b6:	6f 5f       	subi	r22, 0xFF	; 255
 1b8:	64 13       	cpse	r22, r20
 1ba:	f9 cf       	rjmp	.-14     	; 0x1ae <getArrAverage+0xe>
	{
		sum += lastValues[i];
	}
	return sum / size;
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	cb d0       	rcall	.+406    	; 0x356 <__udivmodhi4>
 1c0:	cb 01       	movw	r24, r22
}
 1c2:	08 95       	ret

000001c4 <__vector_8>:
ISR(WDT_vect)                           // wakeup from sleeping
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	8f 93       	push	r24
    cli();                              // no further interrupts
 1d0:	f8 94       	cli
    if(wdtcnt < 0xFF) wdtcnt++; 
 1d2:	80 91 64 00 	lds	r24, 0x0064
 1d6:	8f 3f       	cpi	r24, 0xFF	; 255
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <__vector_8+0x22>
 1da:	80 91 64 00 	lds	r24, 0x0064
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	80 93 64 00 	sts	0x0064, r24
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__vector_8+0x26>
    else wdtcnt = 0;    
 1e6:	10 92 64 00 	sts	0x0064, r1
    WDTCR = (wdtcnt & 1) ? ((1<<WDP3)|(1<<WDE)|(1<<WDTIE)):((1<<WDP1)|(1<<WDP0)|(1<<WDE)|(1<<WDTIE)); // 4 or 0.015 seconds
 1ea:	80 91 64 00 	lds	r24, 0x0064
 1ee:	80 ff       	sbrs	r24, 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <__vector_8+0x32>
 1f2:	88 e6       	ldi	r24, 0x68	; 104
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <__vector_8+0x34>
 1f6:	8b e4       	ldi	r24, 0x4B	; 75
 1f8:	81 bd       	out	0x21, r24	; 33
    sei();							   // further interrupts possible
 1fa:	78 94       	sei
}
 1fc:	8f 91       	pop	r24
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <main>:
int main(void)
{   
    uint16_t actADC;
    uint8_t valueCounter = 0;
	
    ADCSRA |= (1<<ADPS0)|(1<<ADPS2);					// ADC prescaler = 32 (4M/32=125k), Voltage ref. Vcc 3V(is default)
 208:	86 b1       	in	r24, 0x06	; 6
 20a:	85 60       	ori	r24, 0x05	; 5
 20c:	86 b9       	out	0x06, r24	; 6
    DDRB  |= ((1<<RB_PIN)|(1<<GG_PIN)|(1<<BR_PIN));		// All leds output
 20e:	87 b3       	in	r24, 0x17	; 23
 210:	87 60       	ori	r24, 0x07	; 7
 212:	87 bb       	out	0x17, r24	; 23
    DDRB  &= ~(1<<LDR_PIN);								// LDR voltage divider input
 214:	bc 98       	cbi	0x17, 4	; 23
    PORTB |= ((1<<RB_PIN)|(1<<GG_PIN)|(1<<BR_PIN));		// All leds HIGH and off (MCU drives kathode)
 216:	88 b3       	in	r24, 0x18	; 24
 218:	87 60       	ori	r24, 0x07	; 7
 21a:	88 bb       	out	0x18, r24	; 24
	prepareLDR(FOR_DARKNESS);							// ready for calibration
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	8c df       	rcall	.-232    	; 0x138 <prepareLDR>
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	35 e3       	ldi	r19, 0x35	; 53
 224:	8e e6       	ldi	r24, 0x6E	; 110
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	30 40       	sbci	r19, 0x00	; 0
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	d9 f7       	brne	.-10     	; 0x228 <main+0x20>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x2c>
 234:	00 00       	nop
	
	_delay_ms(CALIBRATIONTIME);							// for manual calibration of  DARKTRESHOLD value
    
    testLEDs();
 236:	17 df       	rcall	.-466    	; 0x66 <testLEDs>

    WDTCR = (1<<WDE)|(1<<WDTIE)|(1<<WDP3)| (1<<WDP0);	// Wdt enable, Wdt interrupt enable, 8s intro   
 238:	89 e6       	ldi	r24, 0x69	; 105
 23a:	81 bd       	out	0x21, r24	; 33
    sei();												// interrupts global enable
 23c:	78 94       	sei
}

int main(void)
{   
    uint16_t actADC;
    uint8_t valueCounter = 0;
 23e:	10 e0       	ldi	r17, 0x00	; 0
				prepareLDR(FOR_DIFFERENCE);
    	        actADC = readADC(8, LDR_PIN);
                uint16_t arrAvg = MAX_ADC >>1;
                
                if(valueCounter == VALUESIZE) full_array();
				valueCounter = valueCounter % VALUESIZE;    // loop inside array and override in the beginning again                
 240:	08 e1       	ldi	r16, 0x18	; 24
    sei();												// interrupts global enable


    while(1)
    {       
        if(!(wdtcnt & 1))                               // LDRs 4s darkness next interrupt in 15ms
 242:	80 91 64 00 	lds	r24, 0x0064
 246:	80 fd       	sbrc	r24, 0
 248:	5b c0       	rjmp	.+182    	; 0x300 <main+0xf8>
    	{
    	    if(!(wdtcnt % 16) || (wdtcnt < 10))         // check darkness on the beginning and every 8 while-loops
 24a:	80 91 64 00 	lds	r24, 0x0064
 24e:	8f 70       	andi	r24, 0x0F	; 15
 250:	21 f0       	breq	.+8      	; 0x25a <main+0x52>
 252:	80 91 64 00 	lds	r24, 0x0064
 256:	8a 30       	cpi	r24, 0x0A	; 10
 258:	60 f4       	brcc	.+24     	; 0x272 <main+0x6a>
    	    {
    	        prepareLDR(FOR_DARKNESS);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	6d df       	rcall	.-294    	; 0x138 <prepareLDR>
    	        dark = (readADC(8, LDRPWR_PIN) > DARKTHRESHOLD);
 25e:	63 e0       	ldi	r22, 0x03	; 3
 260:	88 e0       	ldi	r24, 0x08	; 8
 262:	7c df       	rcall	.-264    	; 0x15c <readADC>
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	83 35       	cpi	r24, 0x53	; 83
 268:	93 40       	sbci	r25, 0x03	; 3
 26a:	08 f4       	brcc	.+2      	; 0x26e <main+0x66>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	20 93 63 00 	sts	0x0063, r18
    	    }

    	    if(dark == 1)
 272:	80 91 63 00 	lds	r24, 0x0063
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	09 f0       	breq	.+2      	; 0x27c <main+0x74>
 27a:	42 c0       	rjmp	.+132    	; 0x300 <main+0xf8>
    	    {
				prepareLDR(FOR_DIFFERENCE);
 27c:	5d df       	rcall	.-326    	; 0x138 <prepareLDR>
    	        actADC = readADC(8, LDR_PIN);
 27e:	64 e0       	ldi	r22, 0x04	; 4
 280:	88 e0       	ldi	r24, 0x08	; 8
 282:	6c df       	rcall	.-296    	; 0x15c <readADC>
 284:	ec 01       	movw	r28, r24
                uint16_t arrAvg = MAX_ADC >>1;
                
                if(valueCounter == VALUESIZE) full_array();
 286:	18 31       	cpi	r17, 0x18	; 24
 288:	09 f4       	brne	.+2      	; 0x28c <main+0x84>
 28a:	18 df       	rcall	.-464    	; 0xbc <full_array>
				valueCounter = valueCounter % VALUESIZE;    // loop inside array and override in the beginning again                
 28c:	81 2f       	mov	r24, r17
 28e:	60 2f       	mov	r22, r16
 290:	56 d0       	rcall	.+172    	; 0x33e <__udivmodqi4>

    	        if (!full)
 292:	80 91 60 00 	lds	r24, 0x0060
 296:	e9 2f       	mov	r30, r25
 298:	f0 e0       	ldi	r31, 0x00	; 0
                {
                    lastValues[valueCounter] = actADC;
 29a:	ee 0f       	add	r30, r30
 29c:	ff 1f       	adc	r31, r31
 29e:	eb 59       	subi	r30, 0x9B	; 155
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	d1 83       	std	Z+1, r29	; 0x01
 2a4:	c0 83       	st	Z, r28
                    valueCounter++;	                        // go to next place in array
 2a6:	19 2f       	mov	r17, r25
 2a8:	1f 5f       	subi	r17, 0xFF	; 255
                uint16_t arrAvg = MAX_ADC >>1;
                
                if(valueCounter == VALUESIZE) full_array();
				valueCounter = valueCounter % VALUESIZE;    // loop inside array and override in the beginning again                

    	        if (!full)
 2aa:	81 11       	cpse	r24, r1
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <main+0xaa>
                {
                    lastValues[valueCounter] = actADC;
                    valueCounter++;	                        // go to next place in array
                    arrAvg = getArrAverage(valueCounter);
 2ae:	81 2f       	mov	r24, r17
 2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <main+0xac>
                // 3/4 (arrAvg to ZERO_ADC) to arrAvg + 1/4 (arrAvg to MAX_ADC)
                else if ((actADC <= arrAvg + ((MAX_ADC - arrAvg) >>2)) || (actADC >= arrAvg - ((arrAvg - ZERO_ADC) >>2)))
                {
                    lastValues[valueCounter] = actADC;
                    valueCounter++;
                    arrAvg = getArrAverage(VALUESIZE);
 2b2:	88 e1       	ldi	r24, 0x18	; 24
 2b4:	75 df       	rcall	.-278    	; 0x1a0 <getArrAverage>
                }


                if(actADC > arrAvg + IGNOREBAND) 			// compare actADC with arrAvg
 2b6:	9c 01       	movw	r18, r24
 2b8:	2e 5f       	subi	r18, 0xFE	; 254
 2ba:	3f 4f       	sbci	r19, 0xFF	; 255
 2bc:	2c 17       	cp	r18, r28
 2be:	3d 07       	cpc	r19, r29
 2c0:	60 f4       	brcc	.+24     	; 0x2da <main+0xd2>
    	        {
    	            voltageDividerChanging = (voltageDividerLastState == 1) ? 0 : 1; 
 2c2:	90 91 62 00 	lds	r25, 0x0062
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	91 30       	cpi	r25, 0x01	; 1
 2ca:	09 f4       	brne	.+2      	; 0x2ce <main+0xc6>
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	80 93 61 00 	sts	0x0061, r24
    	            voltageDividerLastState =1;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 62 00 	sts	0x0062, r24
 2d8:	13 c0       	rjmp	.+38     	; 0x300 <main+0xf8>
    	        }
				
    	        else if (actADC < arrAvg - IGNOREBAND)		// compare actADC with arrAvg
 2da:	9c 01       	movw	r18, r24
 2dc:	22 50       	subi	r18, 0x02	; 2
 2de:	31 09       	sbc	r19, r1
 2e0:	c2 17       	cp	r28, r18
 2e2:	d3 07       	cpc	r29, r19
 2e4:	58 f4       	brcc	.+22     	; 0x2fc <main+0xf4>
    	        {
    	            voltageDividerChanging = (voltageDividerLastState == 0) ? 0 : 1; 
 2e6:	90 91 62 00 	lds	r25, 0x0062
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	91 11       	cpse	r25, r1
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <main+0xea>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	80 93 61 00 	sts	0x0061, r24
    	            voltageDividerLastState =0;
 2f6:	10 92 62 00 	sts	0x0062, r1
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <main+0xf8>
    	        }
				else voltageDividerChanging = 0;
 2fc:	10 92 61 00 	sts	0x0061, r1
    	    }
    	} 

        if((wdtcnt > 2 && wdtcnt < 20) || dark == 1)
 300:	80 91 64 00 	lds	r24, 0x0064
 304:	83 30       	cpi	r24, 0x03	; 3
 306:	20 f0       	brcs	.+8      	; 0x310 <main+0x108>
 308:	80 91 64 00 	lds	r24, 0x0064
 30c:	84 31       	cpi	r24, 0x14	; 20
 30e:	20 f0       	brcs	.+8      	; 0x318 <main+0x110>
 310:	80 91 63 00 	lds	r24, 0x0063
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	81 f4       	brne	.+32     	; 0x338 <main+0x130>
        {
            if (voltageDividerChanging == 0)
 318:	80 91 61 00 	lds	r24, 0x0061
 31c:	81 11       	cpse	r24, r1
 31e:	03 c0       	rjmp	.+6      	; 0x326 <main+0x11e>
            {
                blitz(2, GG_PIN);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	08 c0       	rjmp	.+16     	; 0x336 <main+0x12e>
            }
        
            else if (voltageDividerLastState == 1)
 326:	80 91 62 00 	lds	r24, 0x0062
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	11 f4       	brne	.+4      	; 0x332 <main+0x12a>
            {
                blitz(20, RB_PIN);
 32e:	62 e0       	ldi	r22, 0x02	; 2
 330:	01 c0       	rjmp	.+2      	; 0x334 <main+0x12c>
            }
        
            else
            {
                blitz(20, BR_PIN);
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	84 e1       	ldi	r24, 0x14	; 20
 336:	7d de       	rcall	.-774    	; 0x32 <blitz>
            }
        } 
        disable_unused_modules();        
 338:	e9 de       	rcall	.-558    	; 0x10c <disable_unused_modules>
        goes_power_down_now();                          // powerdown 5...7uA, no clocks, we are sleeping not long (we have interrupts)
 33a:	f0 de       	rcall	.-544    	; 0x11c <goes_power_down_now>
    }
 33c:	82 cf       	rjmp	.-252    	; 0x242 <main+0x3a>

0000033e <__udivmodqi4>:
 33e:	99 1b       	sub	r25, r25
 340:	79 e0       	ldi	r23, 0x09	; 9
 342:	04 c0       	rjmp	.+8      	; 0x34c <__udivmodqi4_ep>

00000344 <__udivmodqi4_loop>:
 344:	99 1f       	adc	r25, r25
 346:	96 17       	cp	r25, r22
 348:	08 f0       	brcs	.+2      	; 0x34c <__udivmodqi4_ep>
 34a:	96 1b       	sub	r25, r22

0000034c <__udivmodqi4_ep>:
 34c:	88 1f       	adc	r24, r24
 34e:	7a 95       	dec	r23
 350:	c9 f7       	brne	.-14     	; 0x344 <__udivmodqi4_loop>
 352:	80 95       	com	r24
 354:	08 95       	ret

00000356 <__udivmodhi4>:
 356:	aa 1b       	sub	r26, r26
 358:	bb 1b       	sub	r27, r27
 35a:	51 e1       	ldi	r21, 0x11	; 17
 35c:	07 c0       	rjmp	.+14     	; 0x36c <__udivmodhi4_ep>

0000035e <__udivmodhi4_loop>:
 35e:	aa 1f       	adc	r26, r26
 360:	bb 1f       	adc	r27, r27
 362:	a6 17       	cp	r26, r22
 364:	b7 07       	cpc	r27, r23
 366:	10 f0       	brcs	.+4      	; 0x36c <__udivmodhi4_ep>
 368:	a6 1b       	sub	r26, r22
 36a:	b7 0b       	sbc	r27, r23

0000036c <__udivmodhi4_ep>:
 36c:	88 1f       	adc	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	5a 95       	dec	r21
 372:	a9 f7       	brne	.-22     	; 0x35e <__udivmodhi4_loop>
 374:	80 95       	com	r24
 376:	90 95       	com	r25
 378:	bc 01       	movw	r22, r24
 37a:	cd 01       	movw	r24, r26
 37c:	08 95       	ret

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
